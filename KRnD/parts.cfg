// Install R&D-Module for all parts with the same stats (only applicable settings will be used for each part):
@PART[*]:HAS[!MODULE[KRnDModule]]
{
 	MODULE
	{
		name = KRnDModule
		
		// All parts:
		dryMass_scienceCost				= 10
		dryMass_costScaleReference		= 1		// the base science cost scales with the original mass, in this case 10 science for 1 ton
		dryMass_costScale 				= 2
		dryMass_improvement				= -0.1	// -10% for the first upgrade
		dryMass_improvementScale		= 1
		
		// Engines / RCS:
		ispVac_scienceCost				= 15
		ispVac_costScale 				= 2		// the cost increases each level by: scienceCost * costScale ^ level
		ispVac_improvement				= 0.05	// +5% for the first upgrade
		ispVac_improvementScale			= 1		// the improvement increases each level by: improvement * improvementScale ^ level
		
		ispAtm_scienceCost				= 15
		ispAtm_costScale 				= 2
		ispAtm_improvement				= 0.05
		ispAtm_improvementScale			= 1

		fuelFlow_scienceCost			= 10
		fuelFlow_costScale 				= 2
		fuelFlow_improvement			= 0.1
		fuelFlow_improvementScale		= 1
		
		// Reaction Wheels:
		torque_scienceCost				= 5
		torque_costScale 				= 2
		torque_improvement				= 0.25
		torque_improvementScale			= 1

		// Solar Panels:
		chargeRate_scienceCost			= 10
		chargeRate_costScale 			= 2
		chargeRate_improvement			= 0.05
		chargeRate_improvementScale		= 1
		
		// Landing Legs:
		crashTolerance_scienceCost		= 10
		crashTolerance_costScale 		= 2
		crashTolerance_improvement		= 0.15
		crashTolerance_improvementScale	= 1
		
		// Batteries:
		batteryCharge_scienceCost		= 10
		batteryCharge_costScaleReference = 500	// the base science cost scales with the original capacity, in this case 10 science for 500 charge-units
		batteryCharge_costScale 		= 2
		batteryCharge_improvement		= 0.2
		batteryCharge_improvementScale	= 1
		
		// Generators (eg RTG):
		generatorEfficiency_scienceCost	= 15
		generatorEfficiency_costScale 	= 2
		generatorEfficiency_improvement	= 0.1
		generatorEfficiency_improvementScale = 1
		
		// Converter (eg Ore-Converter or Fuel Cells):
		converterEfficiency_scienceCost	= 15
		converterEfficiency_costScale 	= 2
		converterEfficiency_improvement	= 0.1
		converterEfficiency_improvementScale = 1
		
		// Parachute Strength (cut and deployment speeds):
		parachuteStrength_scienceCost	= 10
		parachuteStrength_costScale		= 2
		parachuteStrength_improvement	= 0.3
		parachuteStrength_improvementScale = 1
		
		// Max Internal- and Skin-Temperature (for withstanding re-entry heat):
		maxTemperature_scienceCost		= 5
		maxTemperature_costScale		= 2
		maxTemperature_improvement		= 0.2
		maxTemperature_improvementScale	= 1
		
		// Fuel Capacity (amount of fuel a tank can hold):
		fuelCapacity_scienceCost		= 5
		fuelCapacity_costScaleReference	= 1000	// the base science cost scales with the original capacity of a tank (sum of all fuels), in this case 5 science for 1000 fuel units
		fuelCapacity_costScale			= 2
		fuelCapacity_improvement		= 0.05
		fuelCapacity_improvementScale	= 1
	}
}
